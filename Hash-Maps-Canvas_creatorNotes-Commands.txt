Commands:

cd C:\DoginalsHashCanvasCreator

python auto_doginals_hash_canvas_creator.py

python auto_doginals_hash_canvas_creator_unique-shapes.py

python doginals_hash_super_canvas_creator.py


-Run this scipt `Hidden_Encoder.py` , and it will encode the hidden Hidden Message for new mints and collections:

`cd C:\DoginalsHashCanvasCreator
python Hidden_Encoder.py`


-Run this scipt `Hidden_Extractor.py` , and it will reveal and print the hidden transaction ID and Hidden Message:


`cd C:\DoginalsHashCanvasCreator
python Hidden_Extractor.py`


-when asked for file path provide YOUR filepath you saved your inscribed image at:

Example:

C:\DoginalsHashCanvasCreator\hash-map_generated_images\hashmap00006.png


python fetch_address_transaction_ids.py
D9UcJkdirVLY11UtF77WnC8peg6xRYsogu

python doginals_hash_canvas_creator_Address_NewestTx.py

python doginals_hash_canvas_creator_new_Ai_art.py


python doginals_hash_canvas_creator_dog_input.py


python DoginalsHashCanvasCreator-in-work.py


Hash Canvas Creator Project Goals: (1 & 2 Completed)

1. Hashing the Picture:

-Used a cryptographic hash function (e.g., SHA-256) to generate a unique hash or binary representation of the picture.


2. Rendering Pictures from Blockchain Hashes:

-Implemented a reverse process to extract images from the hashes stored on the blockchain.

-This involved retrieving the tx hash, searching for the corresponding image in our database or decentralized storage system, and rendering it for display.

3. Linking to the Blockchain:

- We can include relevant metadata, such as timestamps or the transaction IDs link to sochain, to enhance traceability and verification. Implementing Anti-Copying Measures

- Also could create a script to apply digital watermarks or other anti-copying techniques to the original image to deter unauthorized duplication. We can embed ownership information like the inscription id or unique identifiers like The Node Runners text directly into the image, making it identifiable even if copied.

-Then we just got to start the inscription transaction to store the hash of the picture on the blockchain.


4. Verifying Image Integrity:

- we should also later down the road try an develop or utilize tools and applications that can verify the authenticity of images by comparing their hashes with those stored on the blockchain, another indexer of sort, its got to be possible because when I run the script I get excact same outputs for each tx id consistantly

-Users should be able to submit images for verification, retrieve their hashes from the blockchain, and compare them with the hashes generated from the submitted images.


6. Continuous Monitoring and Maintenance:

-Then we just sit back an regularly monitor the blockchain for new transactions related to image hashes. We find to have purpose or meaning. And keep our verification systems and processes up to date as needed to adapt to changes in technology or security requirements. But the collection is infinite an never duplicates.
 